{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","components/Helpers/FilterTodos.tsx","components/Helpers/GetErrorMessage.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","title","id","completed","classNames","type","onClick","TodoFilter","searchValue","setSortBy","setSearchValue","onChange","event","value","target","placeholder","style","pointerEvents","get","url","fetch","then","response","ok","headers","includes","json","Promise","reject","Error","getUser","userId","Loader","TodoModal","useState","currentUser","setCurrentUser","isLoading","setIsLoading","fetchUser","a","user","useEffect","href","email","name","App","todosList","setTodosList","sortBy","errorMessage","setErrorMessage","isLoaded","setIsLoaded","visibleTodos","query","searchQuery","trim","toLowerCase","filtered","filter","filterTodos","fetchTodos","error","message","String","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe13c2e2.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null,\n  setSelectedTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const handleSelectTodo = (target: Todo | null) => {\n    setSelectedTodo(target);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>\n            #\n          </th>\n\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n\n          <th>\n            Title\n          </th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const { title, id, completed } = todo;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames(\n                {\n                  'has-background-info-light': selectedTodo?.id === todo.id,\n                },\n              )}\n              key={id}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleSelectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far', {\n                      'fa-eye-slash': selectedTodo?.id === todo.id,\n                      'fa-eye': !selectedTodo,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","type Props = {\n  searchValue: string;\n  setSortBy: (value: string) => void;\n  setSearchValue: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  searchValue,\n  setSortBy,\n  setSearchValue,\n}) => {\n  const handleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { target: { value } } = event;\n\n    setSortBy(value);\n  };\n\n  const handleChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target: { value } } = event;\n\n    setSearchValue(value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleChangeSelect}>\n            <option value=\"all\">\n              All\n            </option>\n\n            <option value=\"active\">\n              Active\n            </option>\n\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchValue}\n          onChange={handleChangeInput}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {searchValue && (\n            <button\n              aria-label=\"reset query\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setSearchValue('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/';\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return fetch(fullURL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(new Error('Server don`t response'));\n      }\n\n      if (!response.headers.get('content-type')?.includes('application/json')) {\n        return Promise.reject(new Error('Requested file not found'));\n      }\n\n      return response.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  setSelectedTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, setSelectedTodo }) => {\n  const { id, title, userId } = todo;\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchUser = async () => {\n    setIsLoading(true);\n\n    try {\n      const user = await getUser(userId);\n\n      setCurrentUser(user);\n    } catch (error) {\n      throw new Error('Just test');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <>\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n\n        {isLoading && <Loader />}\n\n        {currentUser && (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => setSelectedTodo(null)}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {/* <strong className=\"has-text-success\">Done</strong> */}\n                <strong\n                  className={classNames({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                >\n                  {todo.completed ? 'Done' : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${currentUser?.email}`}>{currentUser?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { getTodos } from './api';\nimport { filterTodos } from './components/Helpers/FilterTodos';\nimport { getErrorMessage } from './components/Helpers/GetErrorMessage';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [todosList, setTodosList] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [sortBy, setSortBy] = useState('all');\n  const [searchValue, setSearchValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const visibleTodos = filterTodos(todosList, sortBy, searchValue);\n\n  const fetchTodos = async () => {\n    try {\n      const todos = await getTodos();\n\n      setTodosList(todos);\n    } catch (error) {\n      setErrorMessage(getErrorMessage(error));\n    } finally {\n      setIsLoaded(false);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoaded(true);\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchValue={searchValue}\n                setSortBy={setSortBy}\n                setSearchValue={setSearchValue}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded ? (\n                <Loader />\n              ) : (\n                <>\n                  {visibleTodos.length\n                    ? (\n                      <TodoList\n                        todos={visibleTodos}\n                        selectedTodo={selectedTodo}\n                        setSelectedTodo={setSelectedTodo}\n                      />\n                    )\n                    : <p>{errorMessage}</p>}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} setSelectedTodo={setSelectedTodo} />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../../types/Todo';\n\nexport function filterTodos(\n  todos: Todo[],\n  sortBy: string,\n  query: string,\n): Todo[] {\n  const searchQuery = query.trim().toLowerCase();\n\n  const filtered = todos.filter(todo => {\n    switch (sortBy) {\n      case 'active':\n        return !todo.completed;\n\n      case 'completed':\n        return todo.completed;\n\n      case 'all':\n      default:\n        return todo;\n    }\n  });\n\n  if (query) {\n    return filtered.filter((todo) => todo\n      .title\n      .toLowerCase()\n      .includes(searchQuery));\n  }\n\n  return filtered;\n}\n","export function getErrorMessage(error: unknown) {\n  return error instanceof Error\n    ? error.message\n    : String(error);\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}